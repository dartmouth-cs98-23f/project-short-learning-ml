start,duration,text
4.35,2.06,"Here we tackle backpropagation,"
6.41,2.99,"the core algorithm behind how neural networks learn."
9.4,1.81,"After a quick recap for where we are,"
11.21,4.26,"the first thing I'll do is an intuitive walkthrough for what the algorithm is actually doing"
15.47,1.8,"without any reference to the formulas,"
17.64,2.67,"Then for those of you who do want to dive into the math,"
20.31,2.83,"the next video goes into the calculus underlying all this."
23.94,1.61,"If you watched the last two videos"
25.55,2.37,"or if you're just jumping in with the appropriate background,"
27.92,3.37,"you know what a neural network is and how it feeds forward information."
31.66,3.44,"Here we're doing the classic example of recognizing handwritten digits,"
35.1,4.83,"whose pixel values get fed into the first layer of the network with 784 neurons."
39.93,4.07,"And I've been showing a network with two hidden layers having just 16 neurons each,"
44.0,5.25,"and an output layer of 10 neurons, indicating which digit the network is choosing as its answer."
50.02,4.32,"I'm also expecting you to understand gradient descent as described in the last video,"
54.34,2.55,"and how what we mean by learning is that"
56.89,4.56,"we want to find which weights and biases minimize a certain cost function."
62.01,3.46,"As a quick reminder, for the cost of a single training example,"
65.47,2.93,"what you do is take the output that the network gives,"
68.4,2.45,"along with the output that you wanted it to give,"
71.2,3.62,"and you just add up the squares of the differences between each component."
75.37,4.65,"Doing this for all of your tens of thousands of training examples, and averaging the results,"
80.02,2.39,"this gives you the total cost of the network."
82.91,3.1,"And as if that's not enough to think about, as described in the last video,"
86.01,4.86,"the thing that we're looking for is the negative gradient of this cost function,"
90.87,4.85,"which tells you how you need to change all of the weights and biases, all of these connections,"
95.72,2.55,"so as to most efficiently decrease the cost."
102.95,2.26,"Backpropagation, the topic of this video,"
105.21,3.59,"is an algorithm for computing that crazy complicated gradient."
109.49,4.52,"And the one idea from the last video that I really want you to hold firmly in your mind right now"
114.01,4.9,"is that because thinking of the gradient vector as a direction in 13000 dimensions is,"
118.91,3.18,"to put it lightly, beyond the scope of our imaginations,"
122.09,1.42,"there's another way you can think about it:"
124.58,3.13,"The magnitude of each component here is telling you"
127.71,3.43,"how sensitive the cost function is to each weight and bias."
131.81,2.77,"For example, let's say you go through the process I'm about to describe,"
134.58,1.79,"and you compute the negative gradient,"
136.37,5.1,"and the component associated with the weight on this edge here comes out to be 3.2,"
141.87,4.5,"while the component associated with this edge here comes out as 0.1."
146.91,1.51,"The way you would interpret that is that"
148.42,4.66,"the cost of the function is 32 times more sensitive to changes in that first weight."
153.64,2.29,"So if you were to wiggle that value just a little bit,"
155.93,2.26,"it's gonna cause some change to the cost,"
158.19,5.01,"and that change is 32 times greater than what the same wiggle to that second weight would give."
168.52,2.92,"Personally, when I was first learning about backpropagation,"
171.44,4.3,"I think the most confusing aspect was just the notation and the index chasing of it all."
176.18,3.27,"But once you unwrap what each part of this algorithm is really doing,"
179.45,3.42,"each individual effect that it's having is actually pretty intuitive."
183.18,3.56,"It's just that there's a lot of little adjustments getting layered on top of each other."
187.66,3.63,"So I'm gonna start things off here with a complete disregard for the notation,"
191.29,2.08,"and just step through those effects that"
193.37,2.98,"each training example is having on the weights and biases."
197.09,1.5,"Because the cost function involves"
198.59,5.05,"averaging a certain cost per example over all the tens of thousands of training examples,"
203.97,4.67,"the way that we adjust the weights and biases for a single gradient descent step"
208.64,2.5,"also depends on every single example,"
211.68,1.52,"or rather in principle it should,"
213.2,2.73,"but for computational efficiency we're going to do a little trick later"
215.93,3.44,"to keep you from needing to hit every single example for every single step."
219.79,1.54,"Another case right now,"
221.33,4.83,"all we're gonna do is focus our attention on one single example: this image of a 2."
226.67,4.98,"What effect should this one training example have on how the weights and biases get adjusted?"
232.68,2.56,"Let's say we're at a point where the network is not well trained yet,"
235.24,2.73,"so the activations in the output are gonna look pretty random,"
237.97,4.07,"maybe something like 0.5, 0.8, 0.2, on and on."
242.64,4.81,"Now we can't directly change those activations, we only have influence on the weights and biases,"
247.79,4.88,"but it is helpful to keep track of which adjustments we wish should take place to that output layer,"
253.27,2.44,"and since we want it to classify the image as a 2,"
256.04,5.32,"we want that third value to get nudged up, while all of the others get nudged down."
262.04,3.98,"Moreover, the sizes of these nudges should be proportional to"
266.02,3.61,"how far away each current value is from its target value."
270.22,4.13,"For example, the increase to that number 2 neurons activation is,"
274.35,4.14,"in a sense, more important than the decrease to the number 8 neuron,"
278.49,2.14,"which is already pretty close to where it should be."
281.99,3.26,"So zooming in further, let's focus just on this one neuron,"
285.25,2.28,"the one whose activation we wish to increase."
288.16,2.39,"Remember, that activation is defined as"
290.55,5.88,"a certain weighted sum of all of the activations in the previous layer, plus a bias,"
296.43,4.86,"which has all been plugged into something like the sigmoid squishification function or a ReLU,"
301.81,5.55,"So there are three different avenues that can team up together to help increase that activation:"
307.68,3.29,"you can increase the bias, you can increase the weights,"
310.97,3.06,"and you can change the activations from the previous layer."
314.95,2.82,"Focusing just on how the weights should be adjusted,"
317.77,3.64,"notice how the weights actually have differing levels of influence:"
321.41,4.34,"the connections with the brightest neurons from the preceding layer have the biggest effect,"
325.75,3.49,"since those weights are multiplied by larger activation values."
331.33,2.15,"So if you were to increase one of those weights,"
333.48,3.89,"it actually has a stronger influence on the ultimate cost function"
337.37,3.45,"than increasing the weights of connections with dimmer neurons,"
340.82,2.83,"at least as far as this one training example is concerned."
344.38,2.51,"Remember when we talked about gradient descent,"
346.89,3.73,"we don't just care about whether each component should get nudged up or down,"
350.62,2.75,"we care about which ones give you the most bang for your buck."
355.27,4.04,"This, by the way, is at least somewhat reminiscent of a theory in neuroscience"
359.31,2.56,"for how biological networks of neurons learn"
361.87,4.95,"Hebbian theory - often summed up in the phrase “neurons that fire together wire together”."
367.26,4.94,"Here, the biggest increases to weights, the biggest strengthening of connections,"
372.2,2.64,"happens between neurons which are the most active,"
374.84,2.75,"and the ones which we wish to become more active."
378.02,3.04,"In a sense, the neurons that are firing while seeing a 2,"
381.06,3.62,"get more strongly linked to those firing when thinking about a 2."
385.42,3.36,"To be clear, I really am not in a position to make statements one way or another"
388.78,4.3,"about whether artificial networks of neurons behave anything like biological brains,"
393.08,4.17,"and this fires-together-wire-together idea comes with a couple meaningful asterisks."
397.25,4.01,"But taken as a very loose analogy, I do find it interesting to note."
401.89,4.13,"Anyway, the third way that we can help increase this neuron's activation"
406.02,3.04,"is by changing all the activations in the previous layer,"
409.56,5.41,"namely, if everything connected to that digit 2 neuron with a positive weight got brighter,"
414.97,2.99,"and if everything connected with a negative weight got dimmer,"
418.34,2.55,"then that digit 2 neuron would become more active."
422.45,3.68,"And similar to the weight changes, you're going to get the most bang for your buck"
426.13,4.42,"by seeking changes that are proportional to the size of the corresponding weights."
432.12,3.24,"Now of course, we cannot directly influence those activations,"
435.36,2.42,"we only have control over the weights and biases."
438.22,5.39,"But just as with the last layer, it's helpful to just keep a note of what those desired changes are."
444.45,5.27,"But keep in mind, zooming out one step here, this is only what that digit 2 output neuron wants."
449.72,5.12,"Remember, we also want all of the other neurons in the last layer to become less active,"
454.84,1.66,"and each of those other output neurons"
456.5,3.34,"has its own thoughts about what should happen to that second-to-last layer."
463.11,3.03,"So, the desire of this digit 2 neuron"
466.14,4.38,"is added together with the desires of all the other output neurons"
470.52,2.72,"for what should happen to this second-to-last layer."
473.58,2.82,"Again, in proportion to the corresponding weights,"
476.4,4.51,"and in proportion to how much each of those neurons needs to change."
481.48,4.03,"This right here is where the idea of propagating backwards comes in."
485.96,2.77,"By adding together all these desired effects,"
488.73,4.83,"you basically get a list of nudges that you want to happen to the second-to-last layer."
494.18,1.21,"And once you have those,"
495.39,2.46,"you can recursively apply the same process"
497.85,3.33,"to the relevant weights and biases that determine those values,"
501.18,3.96,"repeating the same process I just walked through and moving backwards through the network."
509.03,1.34,"And zooming out a bit further,"
510.37,1.55,"remember that this is all just"
511.92,5.48,"how a single training example wishes to nudge each one of those weights and biases."
517.4,2.3,"If we only listen to what that 2 wanted,"
519.7,3.7,"the network would ultimately be incentivized just to classify all images as a 2."
524.03,5.39,"So what you do is you go through this same backprop routine for every other training example,"
529.42,3.78,"recording how each of them would like to change the weights and the biases,"
533.65,2.57,"and you averaged together those desired changes."
542.05,4.89,"This collection here of the averaged nudges to each weight and bias is,"
546.94,4.97,"loosely speaking, the negative gradient of the cost function referenced in the last video,"
551.91,1.83,"or at least something proportional to it."
554.36,5.21,"I say “loosely speaking”, only because I have yet to get quantitatively precise about those nudges."
559.57,2.62,"But if you understood every change that I just referenced,"
562.19,2.58,"why some are proportionally bigger than others,"
564.77,2.39,"and how they all need to be added together,"
567.16,4.01,"you understand the mechanics for what backpropagation is actually doing."
574.05,3.35,"By the way, in practice it takes computers an extremely long time"
577.4,5.09,"to add up the influence of every single training example, every single gradient descent step."
583.01,1.95,"So here's what's commonly done instead:"
585.44,4.84,"You randomly shuffle your training data, and then divide it into a whole bunch of mini-batches,"
590.28,2.4,"let's say, each one having 100 training examples."
593.24,3.19,"Then you compute a step according to the mini-batch."
596.85,2.54,"It's not going to be the actual gradient of the cost function,"
599.39,3.24,"which depends on all of the training data, not this tiny subset."
603.1,2.54,"So it's not the most efficient step downhill."
606.08,2.89,"But each mini batch does give you a pretty good approximation,"
608.97,3.28,"and more importantly, it gives you a significant computational speed up."
612.82,3.99,"If you were to plot the trajectory of your network under the relevant cost surface,"
616.81,5.22,"it would be a little more like a drunk man stumbling aimlessly down a hill, but taking quick steps;"
622.03,5.15,"rather than a carefully calculating man determining the exact downhill direction of each step"
627.18,3.17,"before taking a very slow and careful step in that direction."
631.46,3.48,"This technique is referred to as “stochastic gradient descent”."
636.0,3.8,"There's kind of a lot going on here, so let's just sum it up for ourselves, shall we?"
640.24,2.03,"Backpropagation is the algorithm"
642.27,5.1,"for determining how a single training example would like to nudge the weights and biases,"
647.37,2.56,"not just in terms of whether they should go up or down,"
649.93,5.77,"but in terms of what relative proportions to those changes cause the most rapid decrease to the cost."
656.24,2.03,"A true gradient descent step"
658.27,3.55,"would involve doing this for all your tens and thousands of training examples"
661.82,2.44,"and averaging the desired changes that you get."
664.83,1.51,"But that's computationally slow."
666.69,3.79,"So instead you randomly subdivide the data into these mini-batches"
670.48,2.98,"and compute each step with respect to a mini-batch."
673.9,3.79,"Repeatedly going through all of the mini batches and making these adjustments,"
677.69,3.36,"you will converge towards a local minimum of the cost function,"
681.43,4.31,"which is to say, your network is going to end up doing a really good job on the training examples."
687.45,4.84,"So with all of that said, every line of code that would go into implementing backprop"
692.29,4.68,"actually corresponds with something that you have now seen, at least in informal terms."
697.57,3.39,"But sometimes knowing what the math does is only half the battle,"
700.96,3.5,"and just representing the damn thing is where it gets all muddled and confusing."
704.93,2.69,"So for those of you who do want to go deeper,"
707.62,3.05,"the next video goes through the same ideas that were just presented here"
710.67,2.08,"but in terms of the underlying calculus,"
712.75,4.01,"which should hopefully make it a little more familiar as you see the topic in other resources."
717.21,2.23,"Before that, one thing worth emphasizing is that"
719.44,4.88,"for this algorithm to work, and this goes for all sorts of machine learning beyond just neural networks,"
724.32,1.8,"you need a lot of training data."
726.43,3.43,"In our case, one thing that makes handwritten digits such a nice example"
729.86,2.25,"is that there exists the MNIST database"
732.11,3.18,"with so many examples that have been labeled by humans."
735.29,3.71,"So a common challenge that those of you working in machine learning will be familiar with"
739.0,2.93,"is just getting the labeled training data that you actually need,"
742.24,2.84,"whether that's having people label tens of thousands of images"
745.08,2.47,"or whatever other data type you might be dealing with."
